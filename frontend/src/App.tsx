import React, { useEffect, useMemo, useRef, useState } from "react";
import { API_BASE, WS_BASE, fetchVariants, createRoom, startGame } from "./api";
import JoinTab from "./components/JoinTab";

type Variant = { key: string; title: string; players_min: number; players_max: number; description?: string };
type Card = { suit: string; rank: string };
type PlayerState = { id: string; name: string; hand: Card[] };
type RoomState = {
  id: string;
  name: string;
  variant_title: string;
  players: PlayerState[];
  players_min: number;
  players_max: number;
  table: { attack: Card[]; defend: Card[] };
  trump?: Card | null;
  deck_count: number;
  current_turn?: string | null;
};

function useHeaders() {
  // Telegram init-data –∏–ª–∏ guest
  const [h, setH] = useState<Record<string,string>>({
    "x-user-id": "guest",
    "x-user-name": "Guest",
    "x-user-avatar": "",
  });

  useEffect(() => {
    try {
      // –µ—Å–ª–∏ –≤—Å—Ç—Ä–æ–µ–Ω–æ –≤ Telegram, –º–æ–∂–Ω–æ –ø–æ–¥—Ç—è–Ω—É—Ç—å –∏–∑ initData
      // —Å–µ–π—á–∞—Å –æ—Å—Ç–∞–≤–∏—Ç—å guest, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–±–æ—Ç—É
    } catch {}
  }, []);

  return h;
}

export default function App() {
  const headers = useHeaders();
  const [tab, setTab] = useState<"new"|"join">("new");

  const [variants, setVariants] = useState<Variant[]>([]);
  const [variantKey, setVariantKey] = useState<string>("classic_2p");
  const [roomId, setRoomId] = useState<string | null>(null);
  const [roomState, setRoomState] = useState<RoomState | null>(null);

  const wsRef = useRef<WebSocket | null>(null);

  useEffect(() => {
    fetchVariants().then(setVariants).catch(() => {});
  }, []);

  // –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∫–æ–º–Ω–∞—Ç–µ –ø–æ WS
  function connectRoomWS(id: string, playerId: string) {
    if (wsRef.current) {
      wsRef.current.close();
      wsRef.current = null;
    }
    const ws = new WebSocket(`${WS_BASE}/ws/${id}?player_id=${encodeURIComponent(playerId)}`);
    wsRef.current = ws;

    ws.onmessage = (ev) => {
      try {
        const msg = JSON.parse(ev.data);
        if (msg?.type === "state") {
          setRoomState(msg.payload as RoomState);
        }
      } catch {}
    };
    ws.onclose = () => {
      wsRef.current = null;
    };
  }

  async function handleCreate() {
    const v = variants.find(v => v.key === variantKey);
    const res = await createRoom(variantKey, "–ö–æ–º–Ω–∞—Ç–∞", headers);
    if (res?.room_id) {
      setRoomId(res.room_id);
      // —Å–æ–∑–¥–∞—Ç–µ–ª—å —Ç–æ–∂–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ WS –∫–æ–º–Ω–∞—Ç—ã –∏ –ø–æ–ª—É—á–∞—Ç—å live-–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
      connectRoomWS(res.room_id, headers["x-user-id"]);
      setTab("new"); // –æ—Å—Ç–∞—ë–º—Å—è –≤ —Å–≤–æ–µ–π –∫–æ–º–Ω–∞—Ç–µ
    }
  }

  async function handleStart() {
    if (!roomId) return;
    await startGame(roomId);
    // —Å–µ—Ä–≤–µ—Ä —Ä–∞–∑–æ—à–ª—ë—Ç –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –º—ã –µ–≥–æ –ø—Ä–∏–º–µ–º –∏–∑ ws.onmessage
  }

  const canStart = useMemo(() => {
    if (!roomState) return false;
    // –∫–Ω–æ–ø–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∏–≥—Ä–æ–∫–æ–≤ >= players_min
    const p = roomState.players?.length ?? 0;
    return p >= (roomState.players_min ?? 2);
  }, [roomState]);

  return (
    <div className="p-4 max-w-3xl mx-auto">
      <h1 className="text-3xl font-bold mb-4">–ë—É—Ä–∞</h1>

      {/* –¢–∞–±—ã */}
      <div className="flex gap-2 mb-6">
        <button
          className={"tab " + (tab === "new" ? "active" : "")}
          onClick={() => setTab("new")}
        >
          –ù–æ–≤–∞—è –∏–≥—Ä–∞
        </button>
        <button
          className={"tab " + (tab === "join" ? "active" : "")}
          onClick={() => setTab("join")}
        >
          –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è
        </button>
      </div>

      {/* –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤–∫–ª–∞–¥–æ–∫ */}
      {tab === "join" ? (
        <JoinTab
          headers={headers}
          onJoined={(id) => {
            setRoomId(id);
            connectRoomWS(id, headers["x-user-id"]);
            setTab("new"); // –ø–æ—Å–ª–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å—Ç–æ–ª
          }}
        />
      ) : (
        <div className="space-y-4">
          {/* –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã */}
          {!roomId && (
            <div className="flex items-center gap-3">
              <select
                className="border rounded-lg p-2"
                value={variantKey}
                onChange={(e) => setVariantKey(e.target.value)}
              >
                {variants.map((v) => (
                  <option key={v.key} value={v.key}>
                    {v.title} ({v.players_min}‚Äì{v.players_max})
                  </option>
                ))}
              </select>
              <button className="px-3 py-2 rounded-lg bg-black text-white" onClick={handleCreate}>
                –°–æ–∑–¥–∞—Ç—å
              </button>
            </div>
          )}

          {/* –°—Ç–æ–ª */}
          {roomId && (
            <div className="space-y-3">
              <div className="text-sm text-gray-500">–ö–æ–º–Ω–∞—Ç–∞: {roomId}</div>
              <div className="flex items-center gap-3">
                <div className="text-sm">
                  –ò–≥—Ä–æ–∫–æ–≤: {roomState?.players?.length ?? 0}/{roomState?.players_max ?? "‚Äî"}
                </div>
                <button
                  className="px-3 py-2 rounded-lg bg-black text-white disabled:opacity-40"
                  onClick={handleStart}
                  disabled={!canStart}
                >
                  –°—Ç–∞—Ä—Ç
                </button>
              </div>

              {/* –£–ø—Ä–æ—â—ë–Ω–Ω–∞—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è: –∫–æ–∑—ã—Ä—å –∏ –∑–æ–Ω–∞ —Å—Ç–æ–ª–∞ */}
              <div className="flex gap-10 items-start">
                <div className="text-center">
                  <div className="text-sm text-gray-500 mb-2">–ö–æ–∑—ã—Ä—å</div>
                  <div className="w-16 h-24 rounded-xl border flex items-center justify-center text-2xl bg-gray-50">
                    {roomState?.trump ? "üÇ†" : "?"}
                  </div>
                </div>
                <div className="flex-1">
                  <div className="text-sm text-gray-500 mb-2">–°—Ç–æ–ª</div>
                  <div className="min-h-[100px] rounded-xl border p-3">
                    {/* –∑–¥–µ—Å—å –º–æ–∂–Ω–æ —Ä–∏—Å–æ–≤–∞—Ç—å attack/defend */}
                    {roomState?.table?.attack?.length
                      ? <div className="text-sm">–ö–∞—Ä—Ç—ã –Ω–∞ —Å—Ç–æ–ª–µ: {roomState.table.attack.length}</div>
                      : <div className="text-sm text-gray-400">–ü–æ–∫–∞ –ø—É—Å—Ç–æ</div>}
                  </div>
                </div>
              </div>
            </div>
          )}
        </div>
      )}
    </div>
  );
}
